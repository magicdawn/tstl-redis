// Generated by https://quicktype.io

export interface AllCommands {
  ACL:                             Command;
  "ACL CAT":                       Command;
  "ACL DELUSER":                   Command;
  "ACL DRYRUN":                    Command;
  "ACL GENPASS":                   Command;
  "ACL GETUSER":                   TartuGecko;
  "ACL HELP":                      Command;
  "ACL LIST":                      Command;
  "ACL LOAD":                      Command;
  "ACL LOG":                       Command;
  "ACL SAVE":                      Command;
  "ACL SETUSER":                   Command;
  "ACL USERS":                     Command;
  "ACL WHOAMI":                    Command;
  APPEND:                          Command;
  ASKING:                          TartuGecko;
  AUTH:                            TartuGecko;
  BGREWRITEAOF:                    TartuGecko;
  BGSAVE:                          TartuGecko;
  BITCOUNT:                        Bitcount;
  BITFIELD:                        TartuGecko;
  BITFIELD_RO:                     Command;
  BITOP:                           TartuGecko;
  BITPOS:                          Bitpos;
  BLMOVE:                          TartuGecko;
  BLMPOP:                          TartuGecko;
  BLPOP:                           Blpop;
  BRPOP:                           Blpop;
  BRPOPLPUSH:                      Brpoplpush;
  BZMPOP:                          Command;
  BZPOPMAX:                        Blpop;
  BZPOPMIN:                        Blpop;
  CLIENT:                          Command;
  "CLIENT CACHING":                Command;
  "CLIENT GETNAME":                TartuGecko;
  "CLIENT GETREDIR":               TartuGecko;
  "CLIENT HELP":                   TartuGecko;
  "CLIENT ID":                     TartuGecko;
  "CLIENT INFO":                   TartuGecko;
  "CLIENT KILL":                   TartuGecko;
  "CLIENT LIST":                   TartuGecko;
  "CLIENT NO-EVICT":               Command;
  "CLIENT PAUSE":                  Command;
  "CLIENT REPLY":                  Command;
  "CLIENT SETNAME":                Command;
  "CLIENT TRACKING":               Command;
  "CLIENT TRACKINGINFO":           Command;
  "CLIENT UNBLOCK":                Command;
  "CLIENT UNPAUSE":                Command;
  CLUSTER:                         Command;
  "CLUSTER ADDSLOTS":              Command;
  "CLUSTER ADDSLOTSRANGE":         Command;
  "CLUSTER BUMPEPOCH":             Command;
  "CLUSTER COUNT-FAILURE-REPORTS": Command;
  "CLUSTER COUNTKEYSINSLOT":       Command;
  "CLUSTER DELSLOTS":              Command;
  "CLUSTER DELSLOTSRANGE":         Command;
  "CLUSTER FAILOVER":              Command;
  "CLUSTER FLUSHSLOTS":            Command;
  "CLUSTER FORGET":                Command;
  "CLUSTER GETKEYSINSLOT":         Command;
  "CLUSTER HELP":                  Command;
  "CLUSTER INFO":                  Command;
  "CLUSTER KEYSLOT":               Command;
  "CLUSTER LINKS":                 Command;
  "CLUSTER MEET":                  Command;
  "CLUSTER MYID":                  Command;
  "CLUSTER NODES":                 Command;
  "CLUSTER REPLICAS":              Command;
  "CLUSTER REPLICATE":             Command;
  "CLUSTER RESET":                 Command;
  "CLUSTER SAVECONFIG":            Command;
  "CLUSTER SET-CONFIG-EPOCH":      Command;
  "CLUSTER SETSLOT":               Command;
  "CLUSTER SHARDS":                Command;
  "CLUSTER SLAVES":                Command;
  "CLUSTER SLOTS":                 Command;
  COMMAND:                         Command;
  "COMMAND COUNT":                 Command;
  "COMMAND DOCS":                  Command;
  "COMMAND GETKEYS":               Command;
  "COMMAND GETKEYSANDFLAGS":       Command;
  "COMMAND HELP":                  Command;
  "COMMAND INFO":                  Command;
  "COMMAND LIST":                  Command;
  CONFIG:                          Command;
  "CONFIG GET":                    Command;
  "CONFIG HELP":                   Command;
  "CONFIG RESETSTAT":              Command;
  "CONFIG REWRITE":                Command;
  "CONFIG SET":                    Command;
  COPY:                            Command;
  DBSIZE:                          Command;
  DEBUG:                           Command;
  DECR:                            Command;
  DECRBY:                          Command;
  DEL:                             Command;
  DISCARD:                         Command;
  DUMP:                            Command;
  ECHO:                            Command;
  EVAL:                            Command;
  EVALSHA:                         Command;
  EVALSHA_RO:                      Command;
  EVAL_RO:                         Command;
  EXEC:                            Command;
  EXISTS:                          Command;
  EXPIRE:                          Expire;
  EXPIREAT:                        Expire;
  EXPIRETIME:                      Command;
  FAILOVER:                        Command;
  FCALL:                           Command;
  FCALL_RO:                        Command;
  FLUSHALL:                        Command;
  FLUSHDB:                         Command;
  FUNCTION:                        Command;
  "FUNCTION DELETE":               Command;
  "FUNCTION DUMP":                 Command;
  "FUNCTION FLUSH":                Command;
  "FUNCTION HELP":                 Command;
  "FUNCTION KILL":                 Command;
  "FUNCTION LIST":                 Command;
  "FUNCTION LOAD":                 Command;
  "FUNCTION RESTORE":              Command;
  "FUNCTION STATS":                Command;
  GEOADD:                          Add;
  GEODIST:                         TartuGecko;
  GEOHASH:                         TartuGecko;
  GEOPOS:                          TartuGecko;
  GEORADIUS:                       Command;
  GEORADIUSBYMEMBER:               Command;
  GEORADIUSBYMEMBER_RO:            Command;
  GEORADIUS_RO:                    Command;
  GEOSEARCH:                       Bitpos;
  GEOSEARCHSTORE:                  Geosearchstore;
  GET:                             TartuGecko;
  GETBIT:                          Command;
  GETDEL:                          TartuGecko;
  GETEX:                           Command;
  GETRANGE:                        Command;
  GETSET:                          Command;
  HDEL:                            Hdel;
  HELLO:                           Command;
  HEXISTS:                         Command;
  HGET:                            Command;
  HGETALL:                         Command;
  HINCRBY:                         Command;
  HINCRBYFLOAT:                    Command;
  HKEYS:                           Command;
  HLEN:                            Command;
  HMGET:                           Command;
  HMSET:                           Command;
  HRANDFIELD:                      Command;
  HSCAN:                           Command;
  HSET:                            Command;
  HSETNX:                          Command;
  HSTRLEN:                         Command;
  HVALS:                           Command;
  INCR:                            Command;
  INCRBY:                          Command;
  INCRBYFLOAT:                     Command;
  INFO:                            Command;
  KEYS:                            Command;
  LASTSAVE:                        Command;
  LATENCY:                         Command;
  "LATENCY DOCTOR":                Command;
  "LATENCY GRAPH":                 Command;
  "LATENCY HELP":                  Command;
  "LATENCY HISTOGRAM":             Command;
  "LATENCY HISTORY":               Command;
  "LATENCY LATEST":                Command;
  "LATENCY RESET":                 Command;
  LCS:                             Command;
  LINDEX:                          Command;
  LINSERT:                         Command;
  LLEN:                            Command;
  LMOVE:                           Command;
  LMPOP:                           Command;
  LOLWUT:                          Command;
  LPOP:                            Pop;
  LPOS:                            Command;
  LPUSH:                           Lpush;
  LPUSHX:                          Lpush;
  LRANGE:                          Command;
  LREM:                            Command;
  LSET:                            Command;
  LTRIM:                           Command;
  MEMORY:                          Command;
  "MEMORY DOCTOR":                 Command;
  "MEMORY HELP":                   Command;
  "MEMORY MALLOC-STATS":           Command;
  "MEMORY PURGE":                  Command;
  "MEMORY STATS":                  Command;
  "MEMORY USAGE":                  Command;
  MGET:                            Command;
  MIGRATE:                         Command;
  MODULE:                          TartuGecko;
  "MODULE HELP":                   TartuGecko;
  "MODULE LIST":                   TartuGecko;
  "MODULE LOAD":                   TartuGecko;
  "MODULE LOADEX":                 TartuGecko;
  "MODULE UNLOAD":                 TartuGecko;
  MONITOR:                         TartuGecko;
  MOVE:                            TartuGecko;
  MSET:                            TartuGecko;
  MSETNX:                          TartuGecko;
  MULTI:                           TartuGecko;
  OBJECT:                          TartuGecko;
  "OBJECT ENCODING":               TartuGecko;
  "OBJECT FREQ":                   TartuGecko;
  "OBJECT HELP":                   TartuGecko;
  "OBJECT IDLETIME":               TartuGecko;
  "OBJECT REFCOUNT":               TartuGecko;
  PERSIST:                         TartuGecko;
  PEXPIRE:                         Expire;
  PEXPIREAT:                       Expire;
  PEXPIRETIME:                     TartuGecko;
  PFADD:                           TartuGecko;
  PFCOUNT:                         TartuGecko;
  PFDEBUG:                         Command;
  PFMERGE:                         TartuGecko;
  PFSELFTEST:                      Command;
  PING:                            Command;
  PSETEX:                          TartuGecko;
  PSUBSCRIBE:                      TartuGecko;
  PSYNC:                           Command;
  PTTL:                            Command;
  PUBLISH:                         Command;
  PUBSUB:                          Command;
  "PUBSUB CHANNELS":               Command;
  "PUBSUB HELP":                   Command;
  "PUBSUB NUMPAT":                 Command;
  "PUBSUB NUMSUB":                 Command;
  "PUBSUB SHARDCHANNELS":          Command;
  "PUBSUB SHARDNUMSUB":            Command;
  PUNSUBSCRIBE:                    Command;
  QUIT:                            Command;
  RANDOMKEY:                       Command;
  READONLY:                        Command;
  READWRITE:                       Command;
  RENAME:                          Command;
  RENAMENX:                        Renamenx;
  REPLCONF:                        Command;
  REPLICAOF:                       Command;
  RESET:                           Command;
  RESTORE:                         Restore;
  "RESTORE-ASKING":                Restore;
  ROLE:                            TartuGecko;
  RPOP:                            Pop;
  RPOPLPUSH:                       Command;
  RPUSH:                           Lpush;
  RPUSHX:                          Lpush;
  SADD:                            Lpush;
  SAVE:                            Command;
  SCAN:                            Command;
  SCARD:                           Command;
  SCRIPT:                          Command;
  "SCRIPT DEBUG":                  Command;
  "SCRIPT EXISTS":                 Command;
  "SCRIPT FLUSH":                  Command;
  "SCRIPT HELP":                   Command;
  "SCRIPT KILL":                   Command;
  "SCRIPT LOAD":                   Command;
  SDIFF:                           TartuGecko;
  SDIFFSTORE:                      TartuGecko;
  SELECT:                          TartuGecko;
  SET:                             Set;
  SETBIT:                          TartuGecko;
  SETEX:                           TartuGecko;
  SETNX:                           TartuGecko;
  SETRANGE:                        Command;
  SHUTDOWN:                        Command;
  SINTER:                          Command;
  SINTERCARD:                      Command;
  SINTERSTORE:                     Command;
  SISMEMBER:                       Command;
  SLAVEOF:                         Command;
  SLOWLOG:                         TartuGecko;
  "SLOWLOG GET":                   TartuGecko;
  "SLOWLOG HELP":                  TartuGecko;
  "SLOWLOG LEN":                   TartuGecko;
  "SLOWLOG RESET":                 TartuGecko;
  SMEMBERS:                        TartuGecko;
  SMISMEMBER:                      TartuGecko;
  SMOVE:                           TartuGecko;
  SORT:                            TartuGecko;
  SORT_RO:                         TartuGecko;
  SPOP:                            Pop;
  SPUBLISH:                        TartuGecko;
  SRANDMEMBER:                     Command;
  SREM:                            Hdel;
  SSCAN:                           Command;
  SSUBSCRIBE:                      Command;
  STRLEN:                          Command;
  SUBSCRIBE:                       Command;
  SUBSTR:                          Command;
  SUNION:                          Command;
  SUNIONSTORE:                     Command;
  SUNSUBSCRIBE:                    Command;
  SWAPDB:                          Command;
  SYNC:                            TartuGecko;
  TIME:                            TartuGecko;
  TOUCH:                           TartuGecko;
  TTL:                             TartuGecko;
  TYPE:                            TartuGecko;
  UNLINK:                          TartuGecko;
  UNSUBSCRIBE:                     TartuGecko;
  UNWATCH:                         TartuGecko;
  WAIT:                            TartuGecko;
  WATCH:                           TartuGecko;
  XACK:                            TartuGecko;
  XADD:                            Command;
  XAUTOCLAIM:                      Command;
  XCLAIM:                          Command;
  XDEL:                            Command;
  XGROUP:                          Command;
  "XGROUP CREATE":                 Xgroup;
  "XGROUP CREATECONSUMER":         TartuGecko;
  "XGROUP DELCONSUMER":            TartuGecko;
  "XGROUP DESTROY":                TartuGecko;
  "XGROUP HELP":                   TartuGecko;
  "XGROUP SETID":                  Xgroup;
  XINFO:                           Command;
  "XINFO CONSUMERS":               Command;
  "XINFO GROUPS":                  Command;
  "XINFO HELP":                    Command;
  "XINFO STREAM":                  XinfoStream;
  XLEN:                            TartuGecko;
  XPENDING:                        Command;
  XRANGE:                          Command;
  XREAD:                           Command;
  XREADGROUP:                      TartuGecko;
  XREVRANGE:                       Command;
  XSETID:                          Xsetid;
  XTRIM:                           Command;
  ZADD:                            Add;
  ZCARD:                           Command;
  ZCOUNT:                          Command;
  ZDIFF:                           Command;
  ZDIFFSTORE:                      Command;
  ZINCRBY:                         Command;
  ZINTER:                          TartuGecko;
  ZINTERCARD:                      TartuGecko;
  ZINTERSTORE:                     TartuGecko;
  ZLEXCOUNT:                       TartuGecko;
  ZMPOP:                           TartuGecko;
  ZMSCORE:                         TartuGecko;
  ZPOPMAX:                         TartuGecko;
  ZPOPMIN:                         TartuGecko;
  ZRANDMEMBER:                     TartuGecko;
  ZRANGE:                          Set;
  ZRANGEBYLEX:                     Command;
  ZRANGEBYSCORE:                   Command;
  ZRANGESTORE:                     TartuGecko;
  ZRANK:                           TartuGecko;
  ZREM:                            Hdel;
  ZREMRANGEBYLEX:                  Command;
  ZREMRANGEBYRANK:                 Command;
  ZREMRANGEBYSCORE:                Command;
  ZREVRANGE:                       Command;
  ZREVRANGEBYLEX:                  Command;
  ZREVRANGEBYSCORE:                Command;
  ZREVRANK:                        Command;
  ZSCAN:                           TartuGecko;
  ZSCORE:                          TartuGecko;
  ZUNION:                          TartuGecko;
  ZUNIONSTORE:                     TartuGecko;
}

export interface Command {
  summary:           string;
  since:             string;
  group:             string;
  complexity?:       string;
  acl_categories:    ACLCategory[];
  arity:             number;
  arguments?:        PurpleArgument[];
  command_flags?:    CommandFlag[];
  history?:          Array<string[]>;
  key_specs?:        PurpleKeySpec[];
  hints?:            string[];
  deprecated_since?: string;
  replaced_by?:      string;
  doc_flags?:        DocFlag[];
}

export enum ACLCategory {
  Admin = "@admin",
  Bitmap = "@bitmap",
  Blocking = "@blocking",
  Connection = "@connection",
  Dangerous = "@dangerous",
  Fast = "@fast",
  Geo = "@geo",
  Hash = "@hash",
  Hyperloglog = "@hyperloglog",
  Keyspace = "@keyspace",
  List = "@list",
  Pubsub = "@pubsub",
  Read = "@read",
  Scripting = "@scripting",
  Set = "@set",
  Slow = "@slow",
  Sortedset = "@sortedset",
  Stream = "@stream",
  String = "@string",
  Transaction = "@transaction",
  Write = "@write",
}

export interface PurpleArgument {
  name:            string;
  type:            ArgumentType;
  optional?:       boolean;
  multiple?:       boolean;
  arguments?:      FluffyArgument[];
  key_spec_index?: number;
  token?:          string;
  multiple_token?: boolean;
  since?:          string;
}

export interface FluffyArgument {
  name:            string;
  type:            ArgumentType;
  token?:          string;
  optional?:       boolean;
  since?:          string;
  arguments?:      TentacledArgument[];
  key_spec_index?: number;
  multiple?:       boolean;
}

export interface TentacledArgument {
  name:   string;
  type:   ArgumentType;
  token?: string;
  since?: string;
}

export enum ArgumentType {
  Block = "block",
  Double = "double",
  Integer = "integer",
  Key = "key",
  Oneof = "oneof",
  Pattern = "pattern",
  PureToken = "pure-token",
  String = "string",
  UnixTime = "unix-time",
}

export enum CommandFlag {
  Admin = "admin",
  AllowBusy = "allow_busy",
  Blocking = "blocking",
  Denyoom = "denyoom",
  Fast = "fast",
  Loading = "loading",
  Movablekeys = "movablekeys",
  NoAsyncLoading = "no_async_loading",
  NoAuth = "no_auth",
  NoMandatoryKeys = "no_mandatory_keys",
  NoMulti = "no_multi",
  Noscript = "noscript",
  Pubsub = "pubsub",
  Readonly = "readonly",
  SkipMonitor = "skip_monitor",
  SkipSlowlog = "skip_slowlog",
  Stale = "stale",
  Write = "write",
}

export enum DocFlag {
  Deprecated = "deprecated",
  Syscmd = "syscmd",
}

export interface PurpleKeySpec {
  begin_search: PurpleBeginSearch;
  find_keys:    PurpleFindKeys;
  RW?:          boolean;
  insert?:      boolean;
  RO?:          boolean;
  access?:      boolean;
  delete?:      boolean;
  OW?:          boolean;
  update?:      boolean;
  RM?:          boolean;
  notes?:       string;
  incomplete?:  boolean;
  not_key?:     boolean;
}

export interface PurpleBeginSearch {
  type: BeginSearchType;
  spec: PurpleSpec;
}

export interface PurpleSpec {
  index?:     number;
  keyword?:   string;
  startfrom?: number;
}

export enum BeginSearchType {
  Index = "index",
  Keyword = "keyword",
  Unknown = "unknown",
}

export interface PurpleFindKeys {
  type: FindKeysType;
  spec: FluffySpec;
}

export interface FluffySpec {
  lastkey?:   number;
  keystep?:   number;
  limit?:     number;
  keynumidx?: number;
  firstkey?:  number;
}

export enum FindKeysType {
  Keynum = "keynum",
  Range = "range",
  Unknown = "unknown",
}

export interface TartuGecko {
  summary:        string;
  since:          string;
  group:          string;
  complexity?:    string;
  history?:       Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  arguments?:     StickyArgument[];
  command_flags?: CommandFlag[];
  key_specs?:     FluffyKeySpec[];
  hints?:         string[];
}

export interface StickyArgument {
  name:            string;
  type:            ArgumentType;
  since?:          string;
  optional?:       boolean;
  token?:          string;
  key_spec_index?: number;
  multiple?:       boolean;
  arguments?:      IndigoArgument[];
  multiple_token?: boolean;
}

export interface IndigoArgument {
  name:              string;
  type:              ArgumentType;
  token?:            string;
  arguments?:        BRPOPLPUSHArgument[];
  deprecated_since?: string;
  multiple?:         boolean;
  key_spec_index?:   number;
  optional?:         boolean;
}

export interface BRPOPLPUSHArgument {
  name:            string;
  type:            ArgumentType;
  multiple?:       boolean;
  optional?:       boolean;
  since?:          string;
  token?:          string;
  arguments?:      IndecentArgument[];
  key_spec_index?: number;
}

export interface IndecentArgument {
  name:       string;
  type:       ArgumentType;
  token?:     string;
  arguments?: HilariousArgument[];
  since?:     string;
  multiple?:  boolean;
  optional?:  boolean;
}

export interface HilariousArgument {
  name: string;
  type: ArgumentType;
}

export interface FluffyKeySpec {
  notes?:          string;
  begin_search:    PurpleBeginSearch;
  find_keys:       PurpleFindKeys;
  RW?:             boolean;
  access?:         boolean;
  update?:         boolean;
  variable_flags?: boolean;
  OW?:             boolean;
  RO?:             boolean;
  delete?:         boolean;
  insert?:         boolean;
  not_key?:        boolean;
  RM?:             boolean;
}

export interface Bitcount {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      BITCOUNTKeySpec[];
  arguments:      BITCOUNTArgument[];
  command_flags:  CommandFlag[];
}

export interface BITCOUNTArgument {
  name:            string;
  type:            ArgumentType;
  key_spec_index?: number;
  optional?:       boolean;
  arguments?:      AmbitiousArgument[];
  multiple?:       boolean;
  since?:          string;
  token?:          string;
}

export interface AmbitiousArgument {
  name:       string;
  type:       ArgumentType;
  since?:     string;
  optional?:  boolean;
  arguments?: CunningArgument[];
  token?:     string;
}

export interface MagentaArgument {
  name:            string;
  type:            ArgumentType;
  token?:          string;
  optional?:       boolean;
  arguments?:      CunningArgument[];
  key_spec_index?: number;
}

export interface CunningArgument {
  name:            string;
  type:            ArgumentType;
  token?:          string;
  arguments?:      MagentaArgument[];
  multiple?:       boolean;
  key_spec_index?: number;
  optional?:       boolean;
  since?:          string;
}

export interface BITCOUNTKeySpec {
  begin_search: FluffyBeginSearch;
  find_keys:    FluffyFindKeys;
  RO:           boolean;
  access?:      boolean;
}

export interface FluffyBeginSearch {
  type: BeginSearchType;
  spec: TentacledSpec;
}

export interface TentacledSpec {
  index?: number;
}

export interface FluffyFindKeys {
  type: FindKeysType;
  spec: StickySpec;
}

export interface StickySpec {
  lastkey?: number;
  keystep?: number;
  limit?:   number;
}

export interface Bitpos {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      BITCOUNTKeySpec[];
  arguments:      BITPOSArgument[];
  command_flags:  CommandFlag[];
}

export interface BITPOSArgument {
  name:            string;
  type:            ArgumentType;
  key_spec_index?: number;
  optional?:       boolean;
  arguments?:      FriskyArgument[];
  token?:          string;
  multiple?:       boolean;
  since?:          string;
}

export interface FriskyArgument {
  name:            string;
  type:            ArgumentType;
  optional?:       boolean;
  arguments?:      MischievousArgument[];
  token?:          string;
  since?:          string;
  key_spec_index?: number;
  multiple?:       boolean;
}

export interface MischievousArgument {
  name:       string;
  type:       ArgumentType;
  since?:     string;
  optional?:  boolean;
  arguments?: BraggadociousArgument[];
  token?:     string;
}

export interface BraggadociousArgument {
  name:   string;
  type:   ArgumentType;
  token?: string;
}

export interface Blpop {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      BLPOPKeySpec[];
  arguments:      Argument1[];
  command_flags:  CommandFlag[];
}

export interface Argument1 {
  name:            string;
  type:            ArgumentType;
  key_spec_index?: number;
  multiple?:       boolean;
}

export interface BLPOPKeySpec {
  begin_search: FluffyBeginSearch;
  find_keys:    FluffyFindKeys;
  RW?:          boolean;
  access?:      boolean;
  delete?:      boolean;
  insert?:      boolean;
  update?:      boolean;
  RO?:          boolean;
  OW?:          boolean;
  RM?:          boolean;
  notes?:       string;
}

export interface Brpoplpush {
  summary:          string;
  since:            string;
  group:            string;
  complexity:       string;
  deprecated_since: string;
  replaced_by:      string;
  history:          Array<string[]>;
  acl_categories:   ACLCategory[];
  arity:            number;
  key_specs:        BLPOPKeySpec[];
  arguments:        BRPOPLPUSHArgument[];
  command_flags:    CommandFlag[];
  doc_flags:        DocFlag[];
}

export interface Expire {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      EXPIREKeySpec[];
  arguments:      EXPIREArgument[];
  command_flags:  CommandFlag[];
}

export interface EXPIREArgument {
  name:            string;
  type:            ArgumentType;
  key_spec_index?: number;
  since?:          string;
  optional?:       boolean;
  arguments?:      BraggadociousArgument[];
}

export interface EXPIREKeySpec {
  begin_search: FluffyBeginSearch;
  find_keys:    FluffyFindKeys;
  RW:           boolean;
  update:       boolean;
}

export interface Add {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      EXPIREKeySpec[];
  arguments:      GEOADDArgument[];
  command_flags:  CommandFlag[];
}

export interface GEOADDArgument {
  name:            string;
  type:            ArgumentType;
  key_spec_index?: number;
  since?:          string;
  optional?:       boolean;
  arguments?:      BraggadociousArgument[];
  token?:          string;
  multiple?:       boolean;
  multiple_token?: boolean;
}

export interface Geosearchstore {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      GEOSEARCHSTOREKeySpec[];
  arguments:      BITPOSArgument[];
  command_flags:  CommandFlag[];
}

export interface GEOSEARCHSTOREKeySpec {
  begin_search: FluffyBeginSearch;
  find_keys:    FluffyFindKeys;
  OW?:          boolean;
  update?:      boolean;
  RO?:          boolean;
  access?:      boolean;
  RW?:          boolean;
}

export interface Hdel {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      HDELKeySpec[];
  arguments:      Argument1[];
  command_flags:  CommandFlag[];
}

export interface HDELKeySpec {
  begin_search: FluffyBeginSearch;
  find_keys:    FluffyFindKeys;
  RW:           boolean;
  delete:       boolean;
}

export interface Pop {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      LPOPKeySpec[];
  arguments:      LPOPArgument[];
  command_flags:  CommandFlag[];
  hints?:         string[];
}

export interface LPOPArgument {
  name:            string;
  type:            ArgumentType;
  key_spec_index?: number;
  since?:          string;
  optional?:       boolean;
}

export interface LPOPKeySpec {
  begin_search: FluffyBeginSearch;
  find_keys:    FluffyFindKeys;
  RW:           boolean;
  access:       boolean;
  delete:       boolean;
}

export interface Lpush {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      LPUSHKeySpec[];
  arguments:      Argument1[];
  command_flags:  CommandFlag[];
}

export interface LPUSHKeySpec {
  begin_search: FluffyBeginSearch;
  find_keys:    FluffyFindKeys;
  RW:           boolean;
  insert:       boolean;
}

export interface Renamenx {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      RENAMENXKeySpec[];
  arguments:      BRPOPLPUSHArgument[];
  command_flags:  CommandFlag[];
}

export interface RENAMENXKeySpec {
  begin_search: FluffyBeginSearch;
  find_keys:    FluffyFindKeys;
  RW?:          boolean;
  access?:      boolean;
  delete?:      boolean;
  OW?:          boolean;
  update?:      boolean;
  insert?:      boolean;
}

export interface Restore {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      RESTOREKeySpec[];
  arguments:      RESTOREArgument[];
  command_flags:  string[];
  doc_flags?:     DocFlag[];
}

export interface RESTOREArgument {
  name:            string;
  type:            ArgumentType;
  key_spec_index?: number;
  token?:          string;
  since?:          string;
  optional?:       boolean;
  arguments?:      Argument2[];
}

export interface Argument2 {
  name:      string;
  type:      ArgumentType;
  token?:    string;
  since?:    string;
  optional?: boolean;
}

export interface RESTOREKeySpec {
  begin_search: FluffyBeginSearch;
  find_keys:    FluffyFindKeys;
  OW:           boolean;
  update:       boolean;
}

export interface Set {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      SETKeySpec[];
  arguments:      RESTOREArgument[];
  command_flags:  CommandFlag[];
}

export interface SETKeySpec {
  notes?:          string;
  begin_search:    FluffyBeginSearch;
  find_keys:       FluffyFindKeys;
  RW?:             boolean;
  access?:         boolean;
  update?:         boolean;
  variable_flags?: boolean;
  RO?:             boolean;
  delete?:         boolean;
  insert?:         boolean;
  OW?:             boolean;
}

export interface Xgroup {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      XGROUPCREATEKeySpec[];
  arguments:      XGROUPCREATEArgument[];
  command_flags:  CommandFlag[];
}

export interface XGROUPCREATEArgument {
  name:            string;
  type:            ArgumentType;
  optional?:       boolean;
  multiple?:       boolean;
  arguments?:      Argument3[];
  since?:          string;
  token?:          string;
  key_spec_index?: number;
}

export interface Argument3 {
  name:            string;
  type:            ArgumentType;
  token?:          string;
  since?:          string;
  optional?:       boolean;
  arguments?:      CunningArgument[];
  key_spec_index?: number;
  multiple?:       boolean;
}

export interface XGROUPCREATEKeySpec {
  begin_search: FluffyBeginSearch;
  find_keys:    FluffyFindKeys;
  RM?:          boolean;
  delete?:      boolean;
  RW?:          boolean;
  update?:      boolean;
  access?:      boolean;
  OW?:          boolean;
  insert?:      boolean;
}

export interface XinfoStream {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      SETKeySpec[];
  arguments:      XGROUPCREATEArgument[];
  command_flags:  CommandFlag[];
}

export interface Xsetid {
  summary:        string;
  since:          string;
  group:          string;
  complexity:     string;
  history:        Array<string[]>;
  acl_categories: ACLCategory[];
  arity:          number;
  key_specs:      XGROUPCREATEKeySpec[];
  arguments:      RESTOREArgument[];
  command_flags:  CommandFlag[];
}
